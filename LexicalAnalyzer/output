Lexical Analyzer Results!
Keyword      = if
Separator    = (
Identifier   = x
Operator     = >
Identifier   = y
Separator    = )
Separator    = {
Identifier   = a
Operator     = =
Identifier   = b
Operator     = +
Identifier   = c
Separator    = ;
Identifier   = b
Operator     = =
Identifier   = c
Separator    = ;
Identifier   = c
Operator     = =
Identifier   = a
Operator     = +
Identifier   = b
Separator    = ;
Identifier   = z
Separator    = }
=========End=========
Lexical Analyzer result passed to Syntanx...
<Statement> -> <If>
<If> -> if  ( <Condition>  ) <Statement>   endif |
if  ( <Condition>  ) <Statement>   else  <Statement>  endif

TOKEN -> Keyword
LEXEME -> if
-------------------

TOKEN -> Separator
LEXEME -> (
-------------------
<Condition> -> <Expression> <Relop> <Expression>

TOKEN -> Identifier
LEXEME -> x
-------------------
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> ->  <Primary>
<Primary> -> <Identifier>
<Relop> -> == | ^= | > | < | => | =<

TOKEN -> Operator
LEXEME -> >
-------------------

TOKEN -> Identifier
LEXEME -> y
-------------------
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> ->  <Primary>
<Primary> -> <Identifier>

TOKEN -> Separator
LEXEME -> )
-------------------

TOKEN -> Separator
LEXEME -> {
-------------------

TOKEN -> Identifier
LEXEME -> a
-------------------
<Assign> -> <Identifier> = <Expression>

TOKEN -> Operator
LEXEME -> =
-------------------

TOKEN -> Identifier
LEXEME -> b
-------------------
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> ->  <Primary>
<Primary> -> <Identifier>

TOKEN -> Operator
LEXEME -> +
-------------------
<Expression Prime> + <Term> <Expression Prime>

TOKEN -> Identifier
LEXEME -> c
-------------------
<Term> -> <Factor> <Term Prime>
<Factor> ->  <Primary>
<Primary> -> <Identifier>

TOKEN -> Separator
LEXEME -> ;
-------------------
<Expression Prime> -> <Empty>
<Empty> -> Epsilon

TOKEN -> Identifier
LEXEME -> b
-------------------
<Assign> -> <Identifier> = <Expression>

TOKEN -> Operator
LEXEME -> =
-------------------

TOKEN -> Identifier
LEXEME -> c
-------------------
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> ->  <Primary>
<Primary> -> <Identifier>

TOKEN -> Separator
LEXEME -> ;
-------------------
<Expression Prime> -> <Empty>
<Empty> -> Epsilon

TOKEN -> Identifier
LEXEME -> c
-------------------
<Assign> -> <Identifier> = <Expression>

TOKEN -> Operator
LEXEME -> =
-------------------

TOKEN -> Identifier
LEXEME -> a
-------------------
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> ->  <Primary>
<Primary> -> <Identifier>

TOKEN -> Operator
LEXEME -> +
-------------------
<Expression Prime> + <Term> <Expression Prime>

TOKEN -> Identifier
LEXEME -> b
-------------------
<Term> -> <Factor> <Term Prime>
<Factor> ->  <Primary>
<Primary> -> <Identifier>

TOKEN -> Separator
LEXEME -> ;
-------------------
<Expression Prime> -> <Empty>
<Empty> -> Epsilon

TOKEN -> Identifier
LEXEME -> z
-------------------
<Assign> -> <Identifier> = <Expression>
ERROR Expected -> =

TOKEN -> Separator
LEXEME -> }
-------------------
